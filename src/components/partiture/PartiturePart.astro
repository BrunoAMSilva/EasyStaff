---
import type { Part } from "../../content.config";
import PartitureBeats from "./PartitureBeats.astro";
import PartitureMeasure from "./PartitureMeasure.astro";
import PartitureStaff from "./PartitureStaff.astro";

interface Props {
    partiturePart: Part;
}
const { partiturePart } = Astro.props;
const firstMeasure = partiturePart.measures[0];
const staves = firstMeasure.attributes?.staves || 1;
const stavesGrids: Record<number, string> = {
    1: "grid-rows-13",
    2: "grid-rows-26",
    3: "grid-rows-39",
};
let currentMeasureAttributes = firstMeasure.attributes;
let currentMeasureDirections = firstMeasure.directions;
const mappedMeasures = partiturePart.measures.map((measure) => {
    measure.attributes = measure.attributes
        ? { ...currentMeasureAttributes, ...measure.attributes }
        : currentMeasureAttributes;
    measure.directions = measure.directions
        ? measure.directions
        : currentMeasureDirections;
    currentMeasureAttributes = measure.attributes;
    currentMeasureDirections = measure.directions;
    return measure;
});

const totalMeasures = mappedMeasures.length;
const totalBeats = currentMeasureAttributes?.time.beats
    ? mappedMeasures.reduce((sum, measure) => {
          return sum + (measure.attributes?.time.beats || 0);
      }, 0)
    : mappedMeasures.length;
---

<div class={`grid grid-host`}>
    <div
        style={`grid-template-columns: 18em repeat(${totalMeasures}, 120px 120px 120px 120px);`}
        class={`relative overflow-x-auto p-10 row-span-full grid ${stavesGrids[staves]}`}
    >
        <PartitureBeats
            beats={totalBeats}
            beatsPerMeasure={currentMeasureAttributes?.time.beats || 4}
            offsetStart={1}
        />
        {
            Array.from({ length: staves }).map((_, idx) => (
                <PartitureStaff
                    staffNumber={idx + 1}
                    clef={idx === 0 ? "treble" : "bass"}
                />
            ))
        }
        {
            mappedMeasures.map((measure) => {
                return <PartitureMeasure measure={measure} offsetStart={1} />;
            })
        }
    </div>
</div>
<style>
    .grid-host {
        font-size: clamp(8px, 2vmin, 16px);
    }
</style>