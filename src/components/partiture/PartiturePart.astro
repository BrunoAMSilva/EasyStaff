---
import type { Part } from "../../content.config";
import PartitureBeats from "./PartitureBeats.astro";
import PartitureMeasure from "./PartitureMeasure.astro";
import PartitureStaff from "./PartitureStaff.astro";

interface Props {
    partiturePart: Part;
}
const { partiturePart } = Astro.props;
const firstMeasure = partiturePart.measures[0];
const staves = firstMeasure.attributes?.staves || 1;
const stavesGrids: Record<number, string> = {
    1: "grid-rows-13",
    2: "grid-rows-26",
    3: "grid-rows-39",
};
let currentMeasureAttributes = firstMeasure.attributes;
let currentMeasureDirections = firstMeasure.directions;
const mappedMeasures = partiturePart.measures.map((measure) => {
    measure.attributes = measure.attributes
        ? { ...currentMeasureAttributes, ...measure.attributes }
        : currentMeasureAttributes;
    measure.directions = measure.directions
        ? measure.directions
        : currentMeasureDirections;
    currentMeasureAttributes = measure.attributes;
    currentMeasureDirections = measure.directions;
    return measure;
});

const totalMeasures = mappedMeasures.length;
const totalBeats = currentMeasureAttributes?.time.beats
    ? mappedMeasures.reduce((sum, measure) => {
          return sum + (measure.attributes?.time.beats || 0);
      }, 0)
    : mappedMeasures.length;
const beatsPerMeasure = firstMeasure.directions?.directionType.perMinute || 4;
const tempo = firstMeasure.directions?.sound?.tempo || 120;
const divisions = currentMeasureAttributes?.divisions || 1;

// Prepare note data for audio playback using utility function
import { prepareNotesForAudio } from "../../utils/audio-helpers";
const notesForAudio = prepareNotesForAudio(partiturePart);
---

<div
    class={`grid staff-host overflow-x-auto relative`}
    
>
    <div
        style={`grid-template-columns: 18em repeat(${totalMeasures}, 120px 120px 120px 120px);`}
        class={`staff-grid p-10 row-span-full grid ${stavesGrids[staves]}`}
    >
        <PartitureBeats
            beats={totalBeats}
            beatsPerMeasure={currentMeasureAttributes?.time.beats || 4}
            offsetStart={1}
        />
        {
            Array.from({ length: staves }).map((_, idx) => (
                <PartitureStaff
                    staffNumber={idx + 1}
                    clef={idx === 0 ? "treble" : "bass"}
                />
            ))
        }
        {
            mappedMeasures.map((measure) => {
                return <PartitureMeasure measure={measure} offsetStart={1} />;
            })
        }
    </div>
    <div class="playhead"></div>
</div>
<style is:global>

    .staff-grid {
        margin-inline-start: calc(50vw - (var(--spacing) * 16) - 16em);
        margin-inline-end: 48vw;
        font-size: clamp(0.75rem, 2vmin, 2rem);
    }
    .beat {
        transition:
            background-color 0.2s ease,
            box-shadow 0.2s ease,
            opacity 0.2s ease;
    }

    .beat.active {
        background-color: rgba(59, 130, 246, 0.5);
        box-shadow: 0 0 10px rgba(59, 130, 246, 0.7);
    }

    .beat.complete {
        background-color: rgba(59, 130, 246, 0);
        transition-duration: 0.5s;
    }

    .playhead {
        position: sticky;
        top: 0;
        bottom: 0;
        grid-column: 1 / -1;
        position: sticky;
        left: 50vw;
        grid-row: 1 / -1;
        width: 2px;
        background: rgba(59, 130, 246, 0.9);
        pointer-events: none;
        z-index: 50;
    }
</style>
<script is:inline define:vars={{ tempo, totalBeats, notesForAudio, divisions }}>
    // Store partiture data in window scope for audio integration
    // Use a unique key per component to avoid conflicts with multiple partitures
    window.__partitureData = window.__partitureData || {};
    window.__partitureData.tempo = tempo;
    window.__partitureData.totalBeats = totalBeats;
    window.__partitureData.notesForAudio = notesForAudio;
    window.__partitureData.divisions = divisions;
</script>
<script>
    import { PartiturePlayer } from "../../utils/partiture-player";
    
    const tempo = window.__partitureData?.tempo || 120;
    const totalBeats = window.__partitureData?.totalBeats || 0;
    const notesForAudio = window.__partitureData?.notesForAudio || [];
    const divisions = window.__partitureData?.divisions || 1;
    
    const player = new PartiturePlayer({
        defaultTempo: Number(tempo) || 120,
        totalBeatsHint: Number(totalBeats) || 0,
    });
    
    player.setAudioData(notesForAudio, divisions);
    player.setupEventListeners();
    player.rebuildHosts();
    
</script>

