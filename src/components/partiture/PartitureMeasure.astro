---
import type { HTMLAttributes } from "astro/types";
import type { Measure, Note } from "../../content.config";
import PartitureNote from "./PartitureNote.astro";

interface Props extends HTMLAttributes<"div"> {
  measure: Measure;
  offsetStart: number;
}
const { measure, offsetStart } = Astro.props as Props;
const staves = measure.attributes?.staves || 1;
const beats = measure.attributes?.time.beats || 4;
const measureNumber = measure.number ? parseInt(measure.number) : 1;
const totalBeatsBefore = ((measureNumber - 1) * (beats ? beats : 4)) + offsetStart;
const currentBeats = new Map<number, number>(
  new Array(staves).fill(0).map((_, idx) => [idx + 1, 0]),
);
console.log("Measure", measure.notes.filter(n => !!n.rest));
const lastNotes = new Map<number, Note>();
const mappedNotes = measure.notes.map((note) => {
  const staff = note.staff || 1;
  const beat = currentBeats.get(staff) || 0;

  const lastNote = lastNotes.get(staff);
  lastNotes.set(staff, note);
  if (!lastNote || note.isChord) {
    currentBeats.set(staff, beat === 0 ? 1 : beat);
    return {
      note,
      beat: (beat === 0 ? 1 : beat) + totalBeatsBefore,
    };
  }

  const currentBeat = beat === 0 ? 1 : beat + (lastNote.duration || 1);
  currentBeats.set(staff, currentBeat);

  return {
    note,
    beat: currentBeat + totalBeatsBefore,
  };
});
---

<hr
  
  style={`grid-column: ${((measureNumber) * 4) + 1}; height: calc(100% - 1.5rem);`}
  class="w-0 row-start-3 ml-auto measure-border -row-end-3 border-r-2 self-center border-gray-400 dark:border-gray-400 relative -right-[0.07em]"
/>
{
  mappedNotes.map((note) => {
    return (
      <PartitureNote note={note.note} measure={measure} beat={note.beat} />
    );
  })
}
