---
import type { Notation } from "../../utils/note-notation";

interface Props {
    currentNotation?: Notation;
}

const { currentNotation = 'letter' } = Astro.props;
---

<div class="notation-menu relative">
    <button
        id="notation-toggle"
        class="px-4 py-2 bg-gray-200 dark:bg-gray-800 rounded cursor-pointer hover:bg-gray-300 dark:hover:bg-gray-700 border border-gray-400 dark:border-gray-600 shadow-md"
        aria-expanded="false"
        aria-controls="notation-menu"
        aria-haspopup="menu"
    >
        Display Settings
    </button>
    <div
        id="notation-menu"
        role="menu"
        class="absolute right-0 mt-2 min-w-52 z-10 bg-gray-200 dark:bg-gray-800 rounded shadow flex flex-col space-y-4 p-4"
        aria-labelledby="notation-toggle"
    >
        <div
            class="flex flex-col space-y-2"
            role="group"
            aria-labelledby="notation-section-heading"
        >
            <p
                id="notation-section-heading"
                class="text-sm font-semibold text-gray-700 dark:text-gray-200"
            >
                Notation
            </p>
            <div class="flex flex-col space-y-1">
                <button
                    role="menuitemradio"
                    class="px-3 py-2 hover:bg-gray-300 dark:hover:bg-gray-700 rounded text-left"
                    data-notation="letter"
                    aria-checked={currentNotation === "letter"
                        ? "true"
                        : "false"}
                >
                    Letter names
                </button>
                <button
                    role="menuitemradio"
                    class="px-3 py-2 hover:bg-gray-300 dark:hover:bg-gray-700 rounded text-left"
                    data-notation="solfege"
                    aria-checked={currentNotation === "solfege"
                        ? "true"
                        : "false"}
                >
                    Solfege syllables
                </button>
            </div>
        </div>
        <div
            class="flex flex-col space-y-2"
            role="group"
            aria-labelledby="beats-section-heading"
        >
            <p
                id="beats-section-heading"
                class="text-sm font-semibold text-gray-700 dark:text-gray-200"
            >
                Beat guides
            </p>
            <div class="flex flex-col space-y-1">
                <button
                    role="menuitemradio"
                    class="px-3 py-2 hover:bg-gray-300 dark:hover:bg-gray-700 rounded text-left"
                    data-beats="visible"
                    aria-checked="true"
                >
                    Show beat markers
                </button>
                <button
                    role="menuitemradio"
                    class="px-3 py-2 hover:bg-gray-300 dark:hover:bg-gray-700 rounded text-left"
                    data-beats="hidden"
                    aria-checked="false"
                >
                    Hide beat markers
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    import type { Notation } from "../../utils/note-notation";

    const toggle = document.getElementById(
        "notation-toggle",
    ) as HTMLButtonElement;
    const menu = document.getElementById("notation-menu") as HTMLDivElement;
    const notationButtons = menu.querySelectorAll(
        "[data-notation]",
    ) as NodeListOf<HTMLButtonElement>;
    const beatButtons = menu.querySelectorAll(
        "[data-beats]",
    ) as NodeListOf<HTMLButtonElement>;
    const menuItems = menu.querySelectorAll(
        '[role="menuitemradio"]',
    ) as NodeListOf<HTMLButtonElement>;
    const menuItemArray = Array.from(menuItems);

    menu.classList.add("hidden");

    const NOTATION_STORAGE_KEY = "notation";
    const BEATS_STORAGE_KEY = "beats-visibility";
    const DEFAULT_NOTATION: Notation = "letter";
    const DEFAULT_BEATS = "visible";

    let isOpen = false;
    let currentNotationState: Notation = DEFAULT_NOTATION;
    let currentBeatsState: "visible" | "hidden" = DEFAULT_BEATS;

    function setButtonLabel() {
        const notationLabel =
            currentNotationState === "solfege" ? "Solfege" : "Letter";
        const beatLabel =
            currentBeatsState === "hidden" ? "Beats off" : "Beats on";
        toggle.textContent = `Display: ${notationLabel} Â· ${beatLabel}`;
    }

    function applyNotation(rawNotation: Notation) {
        const notation =
            rawNotation === "letter" || rawNotation === "solfege"
                ? rawNotation
                : DEFAULT_NOTATION;
        currentNotationState = notation;
        document.body.classList.remove("notation-letter", "notation-solfege");
        document.body.classList.add(`notation-${notation}`);
        notationButtons.forEach((item) => {
            const itemNotation = item.getAttribute(
                "data-notation",
            ) as Notation | null;
            item.setAttribute(
                "aria-checked",
                itemNotation === notation ? "true" : "false",
            );
        });
        setButtonLabel();
    }

    function applyBeats(rawSetting: string) {
        const beatsSetting = rawSetting === "hidden" ? "hidden" : DEFAULT_BEATS;
        currentBeatsState = beatsSetting as "visible" | "hidden";
        document.body.classList.remove("beats-visible", "beats-hidden");
        document.body.classList.add(`beats-${beatsSetting}`);
        beatButtons.forEach((button) => {
            const buttonSetting = button.getAttribute("data-beats");
            button.setAttribute(
                "aria-checked",
                buttonSetting === beatsSetting ? "true" : "false",
            );
        });
        setButtonLabel();
    }

    function openMenu() {
        isOpen = true;
        toggle.setAttribute("aria-expanded", "true");
        menu.classList.remove("hidden");
        const currentItem = menu.querySelector(
            '[aria-checked="true"]',
        ) as HTMLButtonElement | null;
        (currentItem || menuItems[0]).focus();
    }

    function closeMenu() {
        if (!isOpen) return;
        isOpen = false;
        toggle.setAttribute("aria-expanded", "false");
        menu.classList.add("hidden");
        toggle.focus();
    }

    const handleToggleClick = () => {
        if (isOpen) {
            closeMenu();
        } else {
            openMenu();
        }
    };

    const handleNotationClick = (item: HTMLButtonElement) => () => {
        const notation =
            (item.getAttribute("data-notation") as Notation) ||
            DEFAULT_NOTATION;
        localStorage.setItem(NOTATION_STORAGE_KEY, notation);
        applyNotation(notation);
        closeMenu();
    };

    const handleBeatClick = (item: HTMLButtonElement) => () => {
        const setting = item.getAttribute("data-beats") || DEFAULT_BEATS;
        localStorage.setItem(BEATS_STORAGE_KEY, setting);
        applyBeats(setting);
        closeMenu();
    };

    const handleDocumentClick = (e: MouseEvent) => {
        if (
            !toggle.contains(e.target as Node) &&
            !menu.contains(e.target as Node)
        ) {
            closeMenu();
        }
    };

    const handleMenuKeydown = (e: KeyboardEvent) => {
        if (e.key === "Escape") {
            closeMenu();
            return;
        }

        if (e.key !== "ArrowDown" && e.key !== "ArrowUp") {
            return;
        }

        e.preventDefault();
        const current = document.activeElement as HTMLButtonElement;
        const currentIndex = menuItemArray.indexOf(current);
        if (currentIndex === -1) {
            if (menuItemArray[0]) {
                menuItemArray[0].focus();
            }
            return;
        }

        const delta = e.key === "ArrowDown" ? 1 : -1;
        let nextIndex = currentIndex + delta;
        if (nextIndex < 0) {
            nextIndex = menuItemArray.length - 1;
        } else if (nextIndex >= menuItemArray.length) {
            nextIndex = 0;
        }

        const nextItem = menuItemArray[nextIndex];
        nextItem?.focus();
    };

    toggle.addEventListener("click", handleToggleClick);
    notationButtons.forEach((item) => {
        item.addEventListener("click", handleNotationClick(item));
    });
    beatButtons.forEach((item) => {
        item.addEventListener("click", handleBeatClick(item));
    });
    document.addEventListener("click", handleDocumentClick);
    menu.addEventListener("keydown", handleMenuKeydown);

    window.addEventListener("astro:unload", () => {
        toggle.removeEventListener("click", handleToggleClick);
        notationButtons.forEach((item) => {
            item.removeEventListener("click", handleNotationClick(item));
        });
        beatButtons.forEach((item) => {
            item.removeEventListener("click", handleBeatClick(item));
        });
        document.removeEventListener("click", handleDocumentClick);
        menu.removeEventListener("keydown", handleMenuKeydown);
    });

    const rawSavedNotation = localStorage.getItem(NOTATION_STORAGE_KEY);
    const savedNotation: Notation =
        rawSavedNotation === "solfege" || rawSavedNotation === "letter"
            ? rawSavedNotation
            : DEFAULT_NOTATION;
    applyNotation(savedNotation);
    if (rawSavedNotation !== "solfege" && rawSavedNotation !== "letter") {
        localStorage.setItem(NOTATION_STORAGE_KEY, savedNotation);
    }

    const savedBeats = localStorage.getItem(BEATS_STORAGE_KEY) || DEFAULT_BEATS;
    applyBeats(savedBeats);
    if (!localStorage.getItem(BEATS_STORAGE_KEY)) {
        localStorage.setItem(BEATS_STORAGE_KEY, savedBeats);
    }
</script>
