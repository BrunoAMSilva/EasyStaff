---
import type { HTMLAttributes } from "astro/types";
import Measure from "./Measure.astro";

interface Props extends HTMLAttributes<"div"> {
    staff: StaffData;
    tempo: number;
}

const { staff, tempo, class: className = "", ...rest } = Astro.props as Props;
const measures = staff.measures.length;
---

<div class={`musical-score ${className}`} {...rest}>
    <div class="flex overflow-x-clip relative">
        <h3
            class={`self-start text-center z-10 absolute left-0 px-4 min-w-20 flex-none ${staff.clef === "bass" ? "text-[16rem] -top-15" : "text-[28rem] -top-53"}`}
        >
            {staff.clef === "bass" ? <>&#119074;</> : <>&#119070</>}
        </h3>
        <div class="staff-host flex-1 grid grid-flow-col">
            <div class="self-center border-l-8 h-3/5 border-l-gray-300 -mr-2">
            </div>
            {
                staff.measures.map((measure) => (
                    <Measure measure={measure} clef={staff.clef} />
                ))
            }
            <div class="self-center border-l-8 h-3/5 border-l-gray-300 -ml-2">
            </div>
        </div>
    </div>
</div>
<style is:global define:vars={{ tempo, measures }}>
    @keyframes translate {
        0% {
            transform: translateX(70vw);
        }
        100% {
            transform: translateX(-100%);
        }
    }
    .staff-host {
        will-change: transform;
        transform: translateX(50vw);
    }
    .staff-host {
        animation: translate
            calc(60s / var(--tempo, 120) * 4 * var(--measures, 1)) linear
            infinite;
        animation-play-state: paused;
    }

    .playing .staff-host {
        animation-play-state: running;
    }
</style>
<script></script>
