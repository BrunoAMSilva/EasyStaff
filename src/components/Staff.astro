---
import type { HTMLAttributes } from "astro/types";
import Measure from "./Measure.astro";

interface Props extends HTMLAttributes<"div"> {
    staff: StaffData;
    tempo: number;
    timeSignature: string;
}

const {
    staff,
    tempo,
    timeSignature,
    class: className = "",
    ...rest
} = Astro.props as Props;
const measures = staff.measures.length;
const timeSigParts = timeSignature.split("/");
const beatsPerMeasure = parseInt(timeSigParts[0], 10);
const totalBeats = staff.measures.length * beatsPerMeasure;
const allBeats = staff.measures.flatMap((measure) => measure.beats);
const beats = new Array(totalBeats).fill(null);
---

<div class={`musical-score ${className}`} {...rest}>
    <div class="flex overflow-x-clip relative">
        <h3
            class={`self-start text-center z-10 absolute left-0 px-4 min-w-20 flex-none ${staff.clef === "bass" ? "text-[16rem] -top-15" : "text-[28rem] -top-53"}`}
        >
            {staff.clef === "bass" ? <>&#119074;</> : <>&#119070</>}
        </h3>
        <div class="staff-host flex-1 grid grid-flow-col">
            <div class="self-center border-l-8 h-3/5 border-l-gray-300 -mr-2">
            </div>
            <div class="staff-grid grid grid-rows-13">
                <hr
                    class="self-center col-start-1 col-span-full row-start-3 row-end-3 border-t-2 border-gray-600 dark:border-gray-400"
                />
                <hr
                    class="self-center col-start-1 col-span-full row-start-5 row-end-5 border-t-2 border-gray-600 dark:border-gray-400"
                />
                <hr
                    class="self-center col-start-1 col-span-full row-start-7 row-end-7 border-t-2 border-gray-600 dark:border-gray-400"
                />
                <hr
                    class="self-center col-start-1 col-span-full row-start-9 row-end-9 border-t-2 border-gray-600 dark:border-gray-400"
                />
                <hr
                    class="self-center col-start-1 col-span-full row-start-11 row-end-11 border-t-2 border-gray-600 dark:border-gray-400"
                />
                {
                    beats.map((_, index) => (
                        <div
                            class={`beat row-span-full border-l border-dashed rounded-xl mx-1 -my-1 border border-gray-400 dark:border-gray-600`}
                            style={`grid-column: ${index + 1};`}
                        />
                    ))
                }
                {
                    staff.measures.map((measure, index) => (
                        <Measure
                            measure={measure}
                            clef={staff.clef}
                            measureIndex={index}
                        />
                    ))
                }
            </div>
            <div class="self-center border-l-8 h-3/5 border-l-gray-300 -ml-2">
            </div>
        </div>
    </div>
</div>
<style is:global define:vars={{ tempo, measures, totalBeats }}>
    @keyframes translate {
        0% {
            transform: translateX(70vw);
        }
        100% {
            transform: translateX(-100%);
        }
    }
    .staff-host {
        will-change: transform;
        transform: translateX(50vw);
    }
    .staff-host {
        animation: translate
            calc(60s / var(--tempo, 120) * 4 * var(--measures, 1)) linear
            infinite;
        animation-play-state: paused;
    }

    .playing .staff-host {
        animation-play-state: running;
    }

    .staff-grid {
        grid-template-columns: repeat(var(--totalBeats), 8rem);
    }

    .beat.active {
        background-color: rgba(59, 130, 246, 0.5);
        box-shadow: 0 0 10px rgba(59, 130, 246, 0.7);
    }
</style>
<script define:vars={{ tempo, measures, totalBeats }}>
    // Multi-staff continuous RAF-driven scroll with looping
    const beatIntervalMs = (60 / tempo) * 1000;
    let globalIsPlaying = document.body.classList.contains('playing');

    function getTranslateX(el) {
        try {
            const s = window.getComputedStyle(el).transform;
            if (!s || s === 'none') return 0;
            const m2 = s.match(/matrix\(([^,]+),([^,]+),([^,]+),([^,]+),([^,]+),([^\)]+)\)/);
            if (m2) return parseFloat(m2[5]);
            const m3 = s.match(/matrix3d\((.+)\)/);
            if (m3) {
                const parts = m3[1].split(',');
                return parseFloat(parts[12]);
            }
        } catch (e) {
            // ignore
        }
        return 0;
    }

    function computeSpacingFor(beatsEls) {
        if (!beatsEls || beatsEls.length < 2) return 0;
        let total = 0;
        let count = 0;
        const maxSamples = Math.min(8, beatsEls.length - 1);
        for (let i = 0; i < maxSamples; i++) {
            const delta = beatsEls[i + 1].offsetLeft - beatsEls[i].offsetLeft;
            if (!Number.isFinite(delta)) continue;
            total += delta;
            count++;
        }
        return count ? total / count : 0;
    }

    // Build per-host state
    function buildStates() {
        const hosts = Array.from(document.querySelectorAll('.staff-host'));
        return hosts.map((host) => {
            const gridEl = host.querySelector('.staff-grid');
            const beatsEls = gridEl ? Array.from(gridEl.querySelectorAll('.beat')) : [];
            const initialTranslate = getTranslateX(host) || 0;
            const spacing = computeSpacingFor(beatsEls) || 0;
            const speed = spacing ? -spacing / beatIntervalMs : 0; // px per ms
            // ensure host is JS-driven
            if (host instanceof HTMLElement) {
                host.style.animation = 'none';
                host.style.willChange = 'transform';
                host.style.transition = 'none';
                host.style.transform = `translateX(${initialTranslate}px)`;
            }

            // set initial active
            beatsEls.forEach((el, i) => el.classList.toggle('active', i === 0));

            return {
                host,
                gridEl,
                beatsEls,
                spacing,
                speed,
                initialTranslate,
                currentTranslate: initialTranslate,
                currentBeat: 0,
                acc: 0,
                lastTime: null,
            };
        });
    }

    let states = [];
    function ensureStates() {
        states = buildStates();
    }

    ensureStates();

    // recompute spacing on resize
    let resizeTimer;
    window.addEventListener('resize', () => {
        clearTimeout(resizeTimer);
        resizeTimer = setTimeout(() => {
            ensureStates();
        }, 120);
    });

    // play/pause listener (applies to all staffs)
    document.addEventListener('piano:play-toggle', (e) => {
        globalIsPlaying = !!e.detail;
        // refresh measurements on start
        if (globalIsPlaying) {
            ensureStates();
            // reset timing state
            states.forEach((s) => {
                s.acc = 0;
                s.lastTime = null;
            });
        }
    });

    // continuous RAF loop: update each staff independently
    function rafLoop(ts) {
        states.forEach((s) => {
            if (!s.lastTime) s.lastTime = ts;
            const elapsed = ts - s.lastTime;
            s.lastTime = ts;

            if (globalIsPlaying && s.spacing > 0 && s.speed !== 0) {
                const delta = s.speed * elapsed; // negative
                s.currentTranslate += delta;
                if (s.host instanceof HTMLElement) s.host.style.transform = `translateX(${s.currentTranslate}px)`;

                s.acc += Math.abs(delta);
                while (s.acc >= s.spacing) {
                    s.acc -= s.spacing;
                    // advance beat
                    s.beatsEls[s.currentBeat]?.classList.remove('active');
                    s.currentBeat += 1;
                    if (s.currentBeat >= s.beatsEls.length) {
                        // loop: reset to start
                        s.currentBeat = 0;
                        s.currentTranslate = s.initialTranslate;
                        if (s.host instanceof HTMLElement) s.host.style.transform = `translateX(${s.currentTranslate}px)`;
                        // reset accumulation so next loop starts fresh
                        s.acc = 0;
                        // recompute spacing in case layout changed
                        s.spacing = computeSpacingFor(s.beatsEls) || s.spacing;
                        s.speed = s.spacing ? -s.spacing / beatIntervalMs : 0;
                    }
                    s.beatsEls[s.currentBeat]?.classList.add('active');
                    document.body.style.setProperty('--current-beat', s.currentBeat.toString());
                }
            } else {
                // paused: reset lastTime to avoid large elapsed on resume
                s.lastTime = ts;
            }
        });

        requestAnimationFrame(rafLoop);
    }

    requestAnimationFrame(rafLoop);
</script>
